/**
 * Example Test Suite
 * Demonstrates how to use the Puppeteer Component Tester framework
 */

import { PuppeteerComponentTester } from './ComponentTester';

async function runExampleTests() {
  console.log('🧪 Starting Example Test Suite\n');

  const tester = new PuppeteerComponentTester({
    devServerPort: 3000,
    baselineDir: './test/baselines',
    screenshotDir: './test/screenshots',
    headless: process.env.HEADLESS !== 'false',
  });

  try {
    // Initialize the tester
    console.log('🚀 Initializing Puppeteer test environment...');
    await tester.initialize();
    console.log('✅ Initialized\n');

    // Example 1: Test individual component
    console.log('📋 Example 1: Testing Button Component');
    const buttonResult = await tester.testComponent({
      componentPath: './src/components/ui/Button.tsx',
      variants: ['filled', 'outlined', 'text'],
      props: { size: 'md' },
    });
    console.log(`Button test: ${buttonResult.success ? '✅ PASSED' : '❌ FAILED'}\n`);

    // Example 2: Test AI-generated component
    console.log('📋 Example 2: Testing AI-Generated Component');
    const aiComponentCode = `
import React from 'react';

export const AIGeneratedCard = ({ title, description }) => {
  return (
    <div className="bg-surface-variant rounded-lg p-6 shadow-md">
      <h3 className="text-headline-sm font-bold text-on-surface mb-2">{title}</h3>
      <p className="text-body-md text-on-surface-variant">{description}</p>
    </div>
  );
};
    `;
    
    const aiResult = await tester.testAIGeneratedComponent(aiComponentCode, {
      title: 'AI Generated Card',
      description: 'This card was generated by a neural network',
    });
    console.log(`AI component test: ${aiResult.success ? '✅ PASSED' : '❌ FAILED'}\n`);

    // Example 3: Batch testing multiple components
    console.log('📋 Example 3: Batch Testing Multiple Components');
    const batchResults = await tester.runBatchTests([
      {
        componentPath: './src/components/ui/Input.tsx',
        props: { placeholder: 'Enter email', type: 'email' },
      },
      {
        componentPath: './src/components/ui/Card.tsx',
        variants: ['elevated', 'outlined'],
      },
      {
        componentPath: './src/components/ui/Badge.tsx',
        variants: ['success', 'warning', 'error', 'info'],
      },
      {
        componentPath: './src/components/ui/Radio.tsx',
        props: { label: 'Select option' },
      },
      {
        componentPath: './src/components/ui/Switch.tsx',
        props: { label: 'Toggle feature', checked: true },
      },
    ]);

    console.log('\n📊 Batch Test Summary:');
    console.log(`Total: ${batchResults.length}`);
    console.log(`Passed: ${batchResults.filter(r => r.success).length}`);
    console.log(`Failed: ${batchResults.filter(r => !r.success).length}\n`);

    // Example 4: Test with visual regression
    console.log('📋 Example 4: Visual Regression Testing');
    const visualResult = await tester.testComponent({
      componentPath: './src/components/ui/Button.tsx',
      variants: ['filled'],
      props: { children: 'Primary Action' },
      baselineDir: './test/baselines',
      screenshotDir: './test/screenshots',
    });
    
    if (visualResult.screenshot && visualResult.baseline) {
      console.log('Visual regression: Baseline comparison complete');
      console.log(`Screenshots saved to: ${visualResult.screenshot}`);
    }
    console.log(`Visual test: ${visualResult.success ? '✅ PASSED' : '❌ FAILED'}\n`);

    // Example 5: Test accessibility
    console.log('📋 Example 5: Accessibility Testing');
    const accessibilityResult = await tester.testComponent({
      componentPath: './src/components/ui/Input.tsx',
      props: {
        label: 'Email',
        type: 'email',
        required: true,
        'aria-label': 'Email address',
      },
    });
    
    if (accessibilityResult.warnings && accessibilityResult.warnings.length > 0) {
      console.log('⚠️  Accessibility warnings:');
      accessibilityResult.warnings.forEach((warning, idx) => {
        console.log(`  ${idx + 1}. ${warning}`);
      });
    } else {
      console.log('✅ No accessibility issues found');
    }
    console.log();

    // Example 6: Performance testing
    console.log('📋 Example 6: Performance Measurement');
    const perfResults = await tester.runBatchTests([
      { componentPath: './src/components/ui/Skeleton.tsx', props: {} },
      { componentPath: './src/components/ui/Slider.tsx', props: { min: 0, max: 100 } },
      { componentPath: './src/components/ui/TooltipMD3.tsx', props: { content: 'Tip' } },
    ]);

    console.log('Performance metrics:');
    perfResults.forEach((result, idx) => {
      if (result.renderTime) {
        console.log(`  Component ${idx + 1}: ${result.renderTime}ms`);
      }
    });
    console.log();

    // Final summary
    console.log('\n' + '='.repeat(60));
    console.log('📊 FINAL TEST SUMMARY');
    console.log('='.repeat(60));
    
    const allTests = [
      buttonResult,
      aiResult,
      ...batchResults,
      visualResult,
      accessibilityResult,
    ];
    
    const passed = allTests.filter(t => t.success).length;
    const failed = allTests.filter(t => t.success === false).length;
    const total = allTests.length;
    
    console.log(`✅ Passed: ${passed}`);
    console.log(`❌ Failed: ${failed}`);
    console.log(`📝 Total: ${total}`);
    console.log(`📊 Success Rate: ${((passed / total) * 100).toFixed(1)}%`);
    console.log('='.repeat(60) + '\n');

    // Cleanup
    console.log('🧹 Cleaning up...');
    await tester.cleanup();
    console.log('✅ Cleanup complete\n');

    console.log('🎉 Example test suite completed successfully!');
    process.exit(passed === total ? 0 : 1);

  } catch (error) {
    console.error('❌ Error running example tests:', error);
    await tester.cleanup();
    process.exit(1);
  }
}

// Run the tests
if (require.main === module) {
  runExampleTests();
}

export { runExampleTests };
