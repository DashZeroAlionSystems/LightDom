name: LightDom CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/*', 'bugfix/*', 'hotfix/*']
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Pre-commit Quality Gates
  pre-commit-gates:
    name: Pre-commit Quality Gates
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Code formatting check
        run: npm run format:check

      - name: Linting
        run: npm run lint

      - name: Type checking
        run: npm run type-check

      - name: Unit tests
        run: npm run test:unit:coverage

      - name: Security scan
        run: npm run security:scan

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Pre-merge Quality Gates
  pre-merge-gates:
    name: Pre-merge Quality Gates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: pre-commit-gates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Integration tests
        run: npm run test:integration

      - name: E2E tests
        run: npm run test:e2e

      - name: Performance tests
        run: npm run test:performance

      - name: Accessibility tests
        run: npm run test:accessibility

      - name: Bundle analysis
        run: npm run analyze:bundle

      - name: Security audit
        run: npm audit --audit-level=moderate

  # Pre-deployment Quality Gates
  pre-deployment-gates:
    name: Pre-deployment Quality Gates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: pre-merge-gates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Load testing
        run: npm run test:load

      - name: Security penetration testing
        run: npm run security:pentest

      - name: Compliance check
        run: npm run compliance:check

      - name: Architecture validation
        run: npm run architecture:validate

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: pre-deployment-gates
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to staging
        run: npm run deploy:staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}

      - name: Health check
        run: npm run health:check
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: pre-deployment-gates
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to production
        run: npm run deploy:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: Health check
        run: npm run health:check
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: Monitor deployment
        run: npm run monitor:deployment
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run Load Testing
        run: npm run test:load

  # Documentation Generation
  docs-generation:
    name: Documentation Generation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Generate API documentation
        run: npm run docs:api:generate

      - name: Generate architecture documentation
        run: npm run docs:architecture:generate

      - name: Update README
        run: npm run docs:readme:update

      - name: Generate changelog
        run: npm run changelog:generate

      - name: Deploy documentation
        run: npm run docs:deploy
        env:
          DOCS_DEPLOY_TOKEN: ${{ secrets.DOCS_DEPLOY_TOKEN }}

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs:
      [pre-commit-gates, pre-merge-gates, pre-deployment-gates, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#lightdom-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup artifacts
        run: |
          echo "Cleaning up temporary files and artifacts"
          rm -rf node_modules/.cache
          rm -rf .next
          rm -rf dist
