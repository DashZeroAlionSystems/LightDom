# LightDom CI/CD Pipeline
# GitHub Actions workflow for automated testing, building, and deployment

name: LightDom CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dom_space_harvester_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Code formatting check
        run: npm run format:check

      - name: Linting
        run: npm run lint

      - name: Type checking
        run: npm run type-check

      - name: Unit tests
        run: npm run test:unit:coverage

      - name: Security scan
        run: npm run security:scan

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Integration tests
        run: npm run test:integration

      - name: E2E tests
        run: npm run test:e2e

      - name: Performance tests
        run: npm run test:performance

      - name: Accessibility tests
        run: npm run test:accessibility

      - name: Bundle analysis
        run: npm run analyze:bundle

      - name: Security audit
        run: npm audit --audit-level=moderate

  # Pre-deployment Quality Gates
  pre-deployment-gates:
    name: Pre-deployment Quality Gates
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Load testing
        run: npm run test:load

      - name: Security penetration testing
        run: npm run security:pentest

      - name: Compliance check
        run: npm run compliance:check

      - name: Architecture validation
        run: npm run architecture:validate

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name lightdom-staging

    - name: Deploy to staging
      run: |
        helm upgrade --install lightdom-staging ./helm/lightdom \
          --namespace lightdom-staging \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set ingress.host=staging.lightdom.example.com

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/lightdom-api -n lightdom-staging
        kubectl wait --for=condition=available --timeout=300s deployment/lightdom-frontend -n lightdom-staging
        
        # Run smoke tests
        curl -f https://staging.lightdom.example.com/api/health
        curl -f https://staging.lightdom.example.com/

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name lightdom-production

    - name: Deploy to production
      run: |
        helm upgrade --install lightdom-production ./helm/lightdom \
          --namespace lightdom-production \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set ingress.host=lightdom.example.com \
          --set replicas.api=3 \
          --set replicas.frontend=2 \
          --set resources.api.limits.memory=1Gi \
          --set resources.api.limits.cpu=500m

    - name: Run production smoke tests
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/lightdom-api -n lightdom-production
        kubectl wait --for=condition=available --timeout=600s deployment/lightdom-frontend -n lightdom-production
        
        # Run comprehensive smoke tests
        curl -f https://lightdom.example.com/api/health
        curl -f https://lightdom.example.com/
        curl -f https://lightdom.example.com/api/blockchain/stats
        curl -f https://lightdom.example.com/api/crawler/stats

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'LightDom production deployment successful! ðŸš€'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run --out json=performance-results.json tests/performance/load-test.js
        k6 run --out json=stress-results.json tests/performance/stress-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          performance-results.json
          stress-results.json

  # Database Migration
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run database migrations
      run: npm run db:migrate
      env:
        NODE_ENV: production
        DB_HOST: ${{ secrets.PROD_DB_HOST }}
        DB_PORT: ${{ secrets.PROD_DB_PORT }}
        DB_NAME: ${{ secrets.PROD_DB_NAME }}
        DB_USER: ${{ secrets.PROD_DB_USER }}
        DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        # Clean up old Docker images from registry
        echo "Cleaning up old images..."
        
    - name: Cleanup old artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cleanup-complete
        path: /dev/null