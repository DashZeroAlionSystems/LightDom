-- AI Content Generation Schema
-- Stores AI-generated content for SEO optimization
-- Integrates with existing SEO features and training data

-- Create schema if not exists
CREATE SCHEMA IF NOT EXISTS ai_content;

-- Table: AI Content Generation Models
-- Stores metadata about trained content generation models
CREATE TABLE IF NOT EXISTS ai_content.generation_models (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    model_name VARCHAR(255) NOT NULL,
    model_version VARCHAR(50) NOT NULL,
    model_type VARCHAR(50) NOT NULL, -- 'title', 'meta_description', 'content', 'schema', 'combined'
    model_path TEXT, -- Path to saved TensorFlow model
    training_dataset_size INTEGER,
    training_features JSONB, -- Features used for training
    hyperparameters JSONB, -- Model hyperparameters
    accuracy_metrics JSONB, -- Accuracy, precision, recall, F1, etc.
    status VARCHAR(50) DEFAULT 'training', -- 'training', 'active', 'archived', 'failed'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deployed_at TIMESTAMP,
    last_used_at TIMESTAMP,
    usage_count INTEGER DEFAULT 0,
    blockchain_hash VARCHAR(66), -- Hash of model stored on blockchain
    UNIQUE(model_name, model_version)
);

CREATE INDEX idx_generation_models_status ON ai_content.generation_models(status);
CREATE INDEX idx_generation_models_type ON ai_content.generation_models(model_type);

-- Table: AI Generated Content
-- Stores all content generated by the AI models
CREATE TABLE IF NOT EXISTS ai_content.generated_content (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    model_id UUID REFERENCES ai_content.generation_models(id),
    url TEXT NOT NULL,
    target_keyword VARCHAR(500),
    content_type VARCHAR(50) NOT NULL, -- 'title', 'meta_description', 'heading', 'paragraph', 'schema', 'full_page'

    -- Generated content fields
    generated_title VARCHAR(255),
    generated_meta_description VARCHAR(500),
    generated_h1 VARCHAR(255),
    generated_h2 TEXT[], -- Array of H2 headings
    generated_content TEXT, -- Full generated content
    generated_schema JSONB, -- JSON-LD schema markup

    -- Input context used for generation
    input_features JSONB, -- SEO features extracted from page
    input_context TEXT, -- Additional context provided
    competitor_analysis JSONB, -- Analysis of competitor pages

    -- Quality metrics
    seo_score DECIMAL(5,2), -- Predicted SEO score (0-100)
    readability_score DECIMAL(5,2), -- Flesch reading ease
    keyword_density DECIMAL(5,2),
    content_length INTEGER,
    unique_words_count INTEGER,
    sentiment_score DECIMAL(5,2), -- -1 to 1

    -- Performance metrics
    generation_time_ms INTEGER, -- Time taken to generate
    confidence_score DECIMAL(5,2), -- Model confidence (0-100)
    quality_validation_passed BOOLEAN DEFAULT false,
    validation_errors JSONB,

    -- Usage tracking
    status VARCHAR(50) DEFAULT 'generated', -- 'generated', 'approved', 'deployed', 'rejected'
    deployed_at TIMESTAMP,
    deployment_url TEXT,
    performance_data JSONB, -- Actual performance after deployment

    -- A/B testing
    variant_group VARCHAR(100), -- For A/B testing
    test_id UUID,

    -- Metadata
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255), -- User or 'system' for automated

    -- Blockchain integration
    blockchain_tx_hash VARCHAR(66), -- Transaction hash if recorded on blockchain
    contributor_reward DECIMAL(18,8) -- Reward amount if content is validated
);

CREATE INDEX idx_generated_content_url ON ai_content.generated_content(url);
CREATE INDEX idx_generated_content_keyword ON ai_content.generated_content(target_keyword);
CREATE INDEX idx_generated_content_status ON ai_content.generated_content(status);
CREATE INDEX idx_generated_content_type ON ai_content.generated_content(content_type);
CREATE INDEX idx_generated_content_model ON ai_content.generated_content(model_id);
CREATE INDEX idx_generated_content_created ON ai_content.generated_content(created_at DESC);

-- Table: Content Generation Queue
-- Manages automated content generation tasks
CREATE TABLE IF NOT EXISTS ai_content.generation_queue (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    url TEXT NOT NULL,
    target_keywords TEXT[], -- Array of keywords to optimize for
    content_types TEXT[], -- Types of content to generate
    priority INTEGER DEFAULT 5, -- 1-10, higher is more urgent

    -- Input parameters
    generation_params JSONB, -- Custom parameters for generation
    site_context JSONB, -- Information about the site/business
    brand_guidelines JSONB, -- Brand voice, tone, style guidelines
    competitor_urls TEXT[], -- URLs to analyze for competitive intelligence

    -- Scheduling
    scheduled_for TIMESTAMP,
    max_retries INTEGER DEFAULT 3,
    retry_count INTEGER DEFAULT 0,

    -- Status tracking
    status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'processing', 'completed', 'failed', 'cancelled'
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    error_message TEXT,

    -- Results
    generated_content_ids UUID[], -- Array of generated_content IDs

    -- Metadata
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    client_id UUID, -- Reference to seo_clients if multi-tenant

    UNIQUE(url, target_keywords, status)
);

CREATE INDEX idx_generation_queue_status ON ai_content.generation_queue(status);
CREATE INDEX idx_generation_queue_priority ON ai_content.generation_queue(priority DESC);
CREATE INDEX idx_generation_queue_scheduled ON ai_content.generation_queue(scheduled_for);

-- Table: Content Performance Tracking
-- Tracks real-world performance of deployed AI-generated content
CREATE TABLE IF NOT EXISTS ai_content.content_performance (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    generated_content_id UUID REFERENCES ai_content.generated_content(id),
    url TEXT NOT NULL,
    keyword VARCHAR(500),

    -- Ranking metrics
    search_position INTEGER,
    search_impressions BIGINT,
    search_clicks BIGINT,
    search_ctr DECIMAL(5,2),
    avg_position DECIMAL(5,2),

    -- Engagement metrics
    page_views BIGINT,
    unique_visitors BIGINT,
    avg_time_on_page DECIMAL(10,2),
    bounce_rate DECIMAL(5,2),
    conversion_rate DECIMAL(5,2),

    -- Technical metrics
    lcp DECIMAL(10,2), -- Largest Contentful Paint
    inp DECIMAL(10,2), -- Interaction to Next Paint
    cls DECIMAL(5,3), -- Cumulative Layout Shift

    -- Comparative analysis
    improvement_over_original JSONB, -- Metrics comparing to original content
    competitor_comparison JSONB, -- How we rank vs competitors

    -- Metadata
    measurement_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    UNIQUE(generated_content_id, measurement_date)
);

CREATE INDEX idx_content_performance_content ON ai_content.content_performance(generated_content_id);
CREATE INDEX idx_content_performance_date ON ai_content.content_performance(measurement_date DESC);

-- Table: Training Feedback
-- Collects feedback to improve content generation models
CREATE TABLE IF NOT EXISTS ai_content.training_feedback (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    generated_content_id UUID REFERENCES ai_content.generated_content(id),
    model_id UUID REFERENCES ai_content.generation_models(id),

    -- Feedback data
    feedback_type VARCHAR(50), -- 'user_rating', 'performance_metric', 'expert_review', 'automated'
    rating DECIMAL(3,2), -- 0-5 stars
    feedback_text TEXT,
    improvements_suggested JSONB,

    -- What worked / didn't work
    successful_elements JSONB, -- Elements that performed well
    failed_elements JSONB, -- Elements that didn't work

    -- Performance based feedback
    ranking_change INTEGER, -- Change in search ranking
    traffic_change DECIMAL(10,2), -- Percentage change in traffic
    engagement_change DECIMAL(5,2), -- Change in engagement metrics

    -- Metadata
    feedback_source VARCHAR(100), -- 'user', 'system', 'expert', 'analytics'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed BOOLEAN DEFAULT false, -- Whether feedback has been used for retraining
    processed_at TIMESTAMP
);

CREATE INDEX idx_training_feedback_content ON ai_content.training_feedback(generated_content_id);
CREATE INDEX idx_training_feedback_model ON ai_content.training_feedback(model_id);
CREATE INDEX idx_training_feedback_processed ON ai_content.training_feedback(processed);

-- Table: Content Templates
-- Stores successful content patterns for reuse
CREATE TABLE IF NOT EXISTS ai_content.content_templates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    template_name VARCHAR(255) NOT NULL,
    template_type VARCHAR(50), -- 'industry', 'content_type', 'keyword_type'
    industry VARCHAR(100), -- E.g., 'ecommerce', 'saas', 'healthcare'
    content_category VARCHAR(100), -- E.g., 'product', 'blog', 'landing_page'

    -- Template structure
    title_pattern VARCHAR(500),
    meta_pattern VARCHAR(1000),
    content_structure JSONB, -- Outline of content sections
    schema_template JSONB, -- Common schema patterns

    -- Success metrics
    avg_performance_score DECIMAL(5,2),
    usage_count INTEGER DEFAULT 0,
    success_rate DECIMAL(5,2), -- Percentage of successful deployments

    -- Configuration
    required_keywords INTEGER, -- Minimum keywords needed
    optimal_length_min INTEGER,
    optimal_length_max INTEGER,
    tone VARCHAR(50), -- 'professional', 'casual', 'technical'

    -- Metadata
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_used_at TIMESTAMP,
    status VARCHAR(50) DEFAULT 'active' -- 'active', 'archived', 'testing'
);

CREATE INDEX idx_content_templates_type ON ai_content.content_templates(template_type);
CREATE INDEX idx_content_templates_industry ON ai_content.content_templates(industry);
CREATE INDEX idx_content_templates_performance ON ai_content.content_templates(avg_performance_score DESC);

-- View: Active Content Performance Summary
CREATE OR REPLACE VIEW ai_content.active_content_summary AS
SELECT
    gc.id,
    gc.url,
    gc.target_keyword,
    gc.content_type,
    gc.generated_title,
    gc.seo_score,
    gc.confidence_score,
    gc.deployed_at,
    gm.model_name,
    gm.model_version,
    COALESCE(AVG(cp.search_position), 0) as avg_search_position,
    COALESCE(SUM(cp.search_clicks), 0) as total_clicks,
    COALESCE(AVG(cp.search_ctr), 0) as avg_ctr,
    COALESCE(AVG(cp.avg_time_on_page), 0) as avg_time_on_page,
    COUNT(cp.id) as measurement_count
FROM ai_content.generated_content gc
LEFT JOIN ai_content.generation_models gm ON gc.model_id = gm.id
LEFT JOIN ai_content.content_performance cp ON gc.id = cp.generated_content_id
WHERE gc.status = 'deployed'
GROUP BY gc.id, gc.url, gc.target_keyword, gc.content_type,
         gc.generated_title, gc.seo_score, gc.confidence_score,
         gc.deployed_at, gm.model_name, gm.model_version;

-- View: Model Performance Metrics
CREATE OR REPLACE VIEW ai_content.model_performance_metrics AS
SELECT
    gm.id,
    gm.model_name,
    gm.model_version,
    gm.model_type,
    gm.status,
    gm.usage_count,
    COUNT(gc.id) as total_generations,
    COUNT(CASE WHEN gc.status = 'deployed' THEN 1 END) as deployed_count,
    COUNT(CASE WHEN gc.quality_validation_passed THEN 1 END) as quality_passed_count,
    AVG(gc.seo_score) as avg_seo_score,
    AVG(gc.confidence_score) as avg_confidence,
    AVG(gc.generation_time_ms) as avg_generation_time_ms,
    COALESCE(AVG(tf.rating), 0) as avg_user_rating,
    COUNT(tf.id) as feedback_count
FROM ai_content.generation_models gm
LEFT JOIN ai_content.generated_content gc ON gm.id = gc.model_id
LEFT JOIN ai_content.training_feedback tf ON gm.id = tf.model_id
GROUP BY gm.id, gm.model_name, gm.model_version, gm.model_type, gm.status, gm.usage_count;

-- Function: Update model last used timestamp
CREATE OR REPLACE FUNCTION ai_content.update_model_last_used()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE ai_content.generation_models
    SET last_used_at = CURRENT_TIMESTAMP,
        usage_count = usage_count + 1
    WHERE id = NEW.model_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_model_last_used
AFTER INSERT ON ai_content.generated_content
FOR EACH ROW
EXECUTE FUNCTION ai_content.update_model_last_used();

-- Function: Auto-update updated_at timestamp
CREATE OR REPLACE FUNCTION ai_content.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_generated_content_updated_at
BEFORE UPDATE ON ai_content.generated_content
FOR EACH ROW
EXECUTE FUNCTION ai_content.update_updated_at_column();

CREATE TRIGGER trigger_generation_queue_updated_at
BEFORE UPDATE ON ai_content.generation_queue
FOR EACH ROW
EXECUTE FUNCTION ai_content.update_updated_at_column();

CREATE TRIGGER trigger_content_templates_updated_at
BEFORE UPDATE ON ai_content.content_templates
FOR EACH ROW
EXECUTE FUNCTION ai_content.update_updated_at_column();

-- Grant permissions (adjust as needed for your setup)
GRANT USAGE ON SCHEMA ai_content TO PUBLIC;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA ai_content TO PUBLIC;
GRANT SELECT ON ALL SEQUENCES IN SCHEMA ai_content TO PUBLIC;

-- Insert default content generation model placeholder
INSERT INTO ai_content.generation_models
    (model_name, model_version, model_type, status, training_features, hyperparameters)
VALUES
    ('seo-content-generator-v1', '1.0.0', 'combined', 'active',
     '{"features": ["keyword_density", "content_length", "readability", "semantic_relevance", "competitor_analysis"]}',
     '{"learning_rate": 0.001, "epochs": 100, "batch_size": 32, "optimizer": "adam"}'),
    ('title-optimizer-v1', '1.0.0', 'title', 'active',
     '{"features": ["keyword_position", "title_length", "power_words", "numbers", "sentiment"]}',
     '{"learning_rate": 0.001, "epochs": 50, "batch_size": 16}'),
    ('meta-description-generator-v1', '1.0.0', 'meta_description', 'active',
     '{"features": ["keyword_presence", "call_to_action", "length_optimization", "uniqueness"]}',
     '{"learning_rate": 0.001, "epochs": 50, "batch_size": 16}');

-- Insert sample content templates for different industries
INSERT INTO ai_content.content_templates
    (template_name, template_type, industry, content_category, title_pattern, meta_pattern, content_structure, status)
VALUES
    ('E-commerce Product Template', 'industry', 'ecommerce', 'product',
     '{keyword} - {benefit} | {brand}',
     'Shop {keyword} at {brand}. {unique_selling_point}. {call_to_action}.',
     '{"sections": ["hero", "features", "benefits", "reviews", "faq", "cta"]}',
     'active'),
    ('SaaS Landing Page Template', 'industry', 'saas', 'landing_page',
     '{keyword}: {benefit} for {target_audience}',
     '{solution} that helps {target_audience} {achieve_goal}. {social_proof}. {cta}.',
     '{"sections": ["hero_with_demo", "problem_agitation", "solution", "features", "testimonials", "pricing", "cta"]}',
     'active'),
    ('Blog Post Template', 'content_type', 'general', 'blog',
     '{number} {adjective} Ways to {action} {keyword}',
     'Discover {number} proven strategies to {achieve_goal}. {timeframe} results. {authority_statement}.',
     '{"sections": ["introduction", "main_points", "examples", "conclusion", "cta"]}',
     'active');

COMMENT ON SCHEMA ai_content IS 'Schema for AI-powered content generation system';
COMMENT ON TABLE ai_content.generation_models IS 'Stores metadata about trained AI content generation models';
COMMENT ON TABLE ai_content.generated_content IS 'All content generated by AI models with quality metrics';
COMMENT ON TABLE ai_content.generation_queue IS 'Queue for managing automated content generation tasks';
COMMENT ON TABLE ai_content.content_performance IS 'Real-world performance tracking of deployed content';
COMMENT ON TABLE ai_content.training_feedback IS 'Feedback data for continuous model improvement';
COMMENT ON TABLE ai_content.content_templates IS 'Successful content patterns for reuse';
