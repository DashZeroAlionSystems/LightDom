{
  "name": "lightdom-space-bridge-platform",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "cli": "node cli.js",
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "preview": "vite preview",
    "electron": "electron .",
    "electron:dev": "electron .",
    "electron:enhanced": "ELECTRON_MAIN=electron/main-enhanced.cjs electron .",
    "electron:build": "npm run build && electron-builder",
    "electron:build:enhanced": "npm run build && electron-builder --config.main=electron/main-enhanced.cjs",
    "start:enhanced": "concurrently \"npm run dev\" \"wait-on http://localhost:3000 && npm run electron:enhanced\"",
    "dist": "npm run build && electron-builder --publish=never",
    "start": "node start-lightdom-complete.js",
    "start:dev": "node start-dev.js",
    "start:docker": "node start-docker.js",
    "start:complete": "node start-complete-system.js",
    "start:blockchain": "node start-blockchain-app.js",
    "test": "vitest",
    "test:unit": "vitest run --coverage",
    "test:unit:coverage": "vitest run --coverage --reporter=verbose",
    "test:integration": "vitest run --config vitest.config.js --testNamePattern=integration",
    "test:e2e": "vitest run --config vitest.config.js --testNamePattern=e2e",
    "test:performance": "vitest run --config vitest.config.js --testNamePattern=performance",
    "test:accessibility": "vitest run --config vitest.config.js --testNamePattern=accessibility",
    "test:load": "echo 'Load tests not configured yet. Install artillery and create tests/load/load-test.yml'",
    "test:smoke": "vitest run --config vitest.config.js --testNamePattern=smoke",
    "test:coverage": "vitest run --coverage --reporter=verbose",
    "test:api": "vitest run --config vitest.config.js --testNamePattern=api",
    "test:frontend": "vitest run --config vitest.config.js --testNamePattern=frontend",
    "lint:check": "eslint . --ext .ts,.tsx,.js,.jsx",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "type-check": "tsc --noEmit",
    "security:scan": "npm audit --audit-level=moderate",
    "security:audit": "npm audit",
    "security:pentest": "echo 'Security penetration testing would run here'",
    "analyze:bundle": "vite-bundle-analyzer",
    "compliance:check": "node scripts/automation/functionality-test.js",
    "automation:round": "node scripts/automation/automation-round.js",
    "automation:agent": "node scripts/automation/cursor-agent.js",
    "automation:master": "node scripts/automation/automation-master.js",
    "automation:enhanced": "node scripts/automation/enhanced-automation-system.js",
    "automation:app-test": "node scripts/automation/app-startup-tester.js",
    "automation:organize": "node scripts/automation/enterprise-organizer.js",
    "automation:git-safe": "node scripts/automation/git-safe-automation.js",
    "automation:master-full": "node scripts/automation/master-automation.js",
    "automation:mermaid": "node scripts/automation/generate-mermaid.js",
    "automation:autopilot": "node scripts/automation/autopilot.js",
    "automation:cursor-linear": "node scripts/enhanced-automation-with-cursor-linear.js",
    "automation:setup": "node scripts/setup-cursor-linear-integration.js",
    "automation:monitor": "node scripts/automation-monitor.cjs",
    "automation:complete": "node scripts/automation/complete-automation-system.js",
    "automation:workflow": "node scripts/automation/workflow-runner.js",
    "automation:workflow:complete": "node scripts/automation/workflow-runner.js workflows/automation/complete-workflow.yml",
    "autopilot": "node scripts/autopilot-entry.js",
    "tickets:queue": "node scripts/ticket-queue-server.js",
    "diagnose:agent": "node scripts/diagnose-background-agent.js",
    "mining:start": "node start-mining.js",
    "mining:deploy": "node scripts/deploy-and-mine.js",
    "blockchain:start": "npx hardhat node",
    "blockchain:compile": "npx hardhat compile",
    "testnet:start": "node scripts/start-testnet.js",
    "testnet:deploy": "node scripts/testnet-deploy-all-contracts.js",
    "testnet:stop": "pkill -f 'hardhat node' && pkill -f 'start-testnet.js'",
    "testnet:reset": "npm run testnet:stop && rm -rf deployments/testnet-*.json && npm run testnet:start",
    "testnet:verify": "node scripts/verify-testnet-contracts.js",
    "cursor:launch-agent": "node scripts/cursor-agent-launcher.js",
    "linear:create-issue": "node scripts/linear-issue-creator.js",
    "linear:sync": "node scripts/linear-sync.js",
    "architecture:validate": "echo 'Architecture validation would run here'",
    "docs:api:generate": "echo 'API documentation generation would run here'",
    "docs:architecture:generate": "echo 'Architecture documentation generation would run here'",
    "docs:readme:update": "echo 'README update would run here'",
    "changelog:generate": "echo 'Changelog generation would run here'",
    "docs:deploy": "echo 'Documentation deployment would run here'",
    "db:health": "node scripts/db-health-check.cjs",
    "db:populate-metaverse": "node scripts/populate-metaverse-data.js",
    "health:check": "curl -f http://localhost:3001/health || exit 1",
    "monitor:deployment": "echo 'Deployment monitoring would run here'",
    "deploy:staging": "echo 'Staging deployment would run here'",
    "deploy:production": "echo 'Production deployment would run here'",
    "deploy:local": "echo 'Local deployment would run here'",
    "devnet:setup": "echo 'Devnet setup would run here'",
    "admin:start": "node scripts/start-admin-system.js",
    "admin:stop": "pkill -f 'scripts/.*-dashboard.js' && pkill -f 'scripts/analytics-system.js' && pkill -f 'scripts/health-monitor.js' && pkill -f 'scripts/system-integration.js'",
    "admin:restart": "npm run admin:stop && sleep 3 && npm run admin:start",
    "admin:status": "curl -s http://localhost:8084/api/system/status | jq .",
    "admin:production": "node scripts/production-dashboard.js",
    "admin:dashboard": "node scripts/admin-dashboard.js",
    "admin:analytics": "node scripts/analytics-system.js",
    "admin:health": "node scripts/health-monitor.js",
    "admin:integration": "node scripts/system-integration.js",
    "admin:cli": "node scripts/lightdom-cli.js",
    "admin:security": "node scripts/security-audit.js",
    "admin:performance": "node scripts/run-performance-tests.js",
    "admin:logs": "tail -f logs/*.log",
    "admin:backup": "node scripts/lightdom-cli.js db:backup",
    "admin:deploy": "node scripts/lightdom-cli.js deploy --environment production",
    "admin:maintenance": "node scripts/lightdom-cli.js maintenance:start",
    "admin:monitor": "node scripts/lightdom-cli.js monitor:start",
    "admin:monitoring": "node scripts/monitoring-system.js",
    "test:enhanced": "node test-enhanced-integration.js",
    "test:desktop": "node test-desktop.js",
    "test:integration": "node test-complete-integration.js",
    "test:all": "npm run test:enhanced && npm run test:desktop && npm run test:integration",
    "monitoring:start": "node scripts/monitoring-system.js",
    "monitoring:status": "curl -s http://localhost:8085/api/health | jq .",
    "monitoring:alerts": "curl -s http://localhost:8085/api/alerts | jq .",
    "monitoring:incidents": "curl -s http://localhost:8085/api/incidents | jq .",
    "mcp:n8n": "tsx src/mcp/n8n-mcp-server-enhanced.ts",
    "mcp:n8n:dev": "tsx watch src/mcp/n8n-mcp-server-enhanced.ts",
    "mcp:build": "tsc src/mcp/*.ts --outDir dist/src/mcp --module esnext --target es2020 --moduleResolution node"
  },
  "dependencies": {
    "@ant-design/icons": "^6.0.2",
    "@ant-design/plots": "^2.6.5",
    "@linear/sdk": "^60.0.0",
    "@modelcontextprotocol/sdk": "^1.0.4",
    "@tailwindcss/postcss": "^4.1.14",
    "@tensorflow/tfjs": "^4.22.0",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.3",
    "antd": "^5.27.4",
    "autoprefixer": "^10.4.21",
    "axios": "^1.12.2",
    "chalk": "^5.6.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cheerio": "^1.1.2",
    "commander": "^11.1.0",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "ethers": "^6.15.0",
    "express": "^4.18.2",
    "express-rate-limit": "^8.1.0",
    "hardhat": "^3.0.6",
    "helmet": "^8.1.0",
    "js-yaml": "^4.1.0",
    "lucide-react": "^0.544.0",
    "morgan": "^1.10.1",
    "node-fetch": "^3.3.2",
    "pg": "^8.16.3",
    "postcss": "^8.5.6",
    "puppeteer": "^24.23.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^6.30.1",
    "redis": "^5.8.3",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.7.4",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.14",
    "tsx": "^4.20.6",
    "typescript": "^5.9.2",
    "uuid": "^9.0.1",
    "vite": "^7.1.9",
    "winston": "^3.18.3"
  },
  "devDependencies": {
    "@types/react": "^19.2.2",
    "@types/react-dom": "^19.2.1",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitest/coverage-v8": "^1.0.0",
    "artillery": "^2.0.0",
    "concurrently": "^9.2.1",
    "electron": "^38.1.2",
    "electron-builder": "^26.0.12",
    "eslint": "^8.0.0",
    "prettier": "^3.0.0",
    "vite-bundle-analyzer": "^0.7.0",
    "vitest": "^1.0.0",
    "wait-on": "^9.0.0"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "jsdom",
    "setupFilesAfterEnv": [
      "<rootDir>/src/setupTests.ts"
    ],
    "testMatch": [
      "<rootDir>/tests/**/*.test.ts",
      "<rootDir>/tests/**/*.test.tsx",
      "<rootDir>/src/**/*.test.ts",
      "<rootDir>/src/**/*.test.tsx"
    ],
    "collectCoverageFrom": [
      "src/**/*.{ts,tsx}",
      "!src/**/*.d.ts",
      "!src/main.tsx",
      "!src/setupTests.ts"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 80,
        "functions": 80,
        "lines": 80,
        "statements": 80
      }
    },
    "testTimeout": 30000,
    "moduleNameMapping": {
      "^@/(.*)$": "<rootDir>/src/$1"
    }
  },
  "main": "electron/main.cjs",
  "build": {
    "appId": "com.lightdom.space-bridge",
    "productName": "LightDom Space-Bridge Platform",
    "directories": {
      "output": "dist-electron"
    },
    "files": [
      "dist/**/*",
      "electron/**/*",
      "api-server-express.js",
      "src/**/*",
      "crawler/**/*",
      "contracts/**/*",
      "database/**/*",
      "start-*.js",
      "dom-space-harvester.tsx",
      "node_modules/**/*"
    ],
    "mac": {
      "category": "public.app-category.developer-tools"
    },
    "win": {
      "target": "nsis"
    },
    "linux": {
      "target": "AppImage"
    }
  }
}

