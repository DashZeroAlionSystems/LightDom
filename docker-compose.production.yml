# LightDom Docker Compose for Production
# Complete production stack with monitoring and scaling

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lightdom-postgres
    environment:
      POSTGRES_DB: dom_space_harvester
      POSTGRES_USER: lightdom
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - lightdom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lightdom -d dom_space_harvester"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lightdom-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - lightdom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LightDom API Server
  api-server:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: lightdom-api
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: dom_space_harvester
      DB_USER: lightdom
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      DB_SSL: false
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_123}
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL:-http://localhost:8545}
      CRAWLER_MAX_CONCURRENCY: 5
      MONITORING_ENABLED: true
      MONITORING_PORT: 9090
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your_encryption_key}
    ports:
      - "3001:3001"
      - "9090:9090"
    volumes:
      - ./logs:/app/logs
      - ./artifacts:/app/artifacts
    networks:
      - lightdom-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # LightDom Frontend (Nginx)
  frontend:
    image: nginx:alpine
    container_name: lightdom-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - lightdom-network
    depends_on:
      - api-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Systems (Blockchain + Crawler)
  enhanced-systems:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: lightdom-enhanced
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: dom_space_harvester
      DB_USER: lightdom
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL:-http://localhost:8545}
      CRAWLER_MAX_CONCURRENCY: 3
      API_SERVER_URL: http://api-server:3001
    volumes:
      - ./logs:/app/logs
      - ./artifacts:/app/artifacts
    networks:
      - lightdom-network
    depends_on:
      postgres:
        condition: service_healthy
      api-server:
        condition: service_healthy
    restart: unless-stopped
    command: ["node", "scripts/start-enhanced-systems.js"]

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: lightdom-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - lightdom-network
    depends_on:
      - api-server
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Monitoring (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: lightdom-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_password_123}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - lightdom-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Aggregation (Fluentd)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: lightdom-fluentd
    volumes:
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/lightdom:ro
    networks:
      - lightdom-network
    depends_on:
      - api-server
    restart: unless-stopped

  # Load Balancer (Nginx)
  load-balancer:
    image: nginx:alpine
    container_name: lightdom-load-balancer
    ports:
      - "8080:80"
    volumes:
      - ./monitoring/nginx/load-balancer.conf:/etc/nginx/nginx.conf:ro
    networks:
      - lightdom-network
    depends_on:
      - api-server
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  lightdom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
