# Complete Automation Workflow Configuration
# This workflow orchestrates all LightDom automation tasks

name: LightDom Complete Automation
version: "2.0.0"
description: "Comprehensive automation workflow for LightDom project completion"
author: "LightDom Automation Team"
created: "2025-10-06"

# Workflow stages
stages:
  - name: initialization
    description: "Initialize environment and perform pre-flight checks"
    tasks:
      - id: preflight-checks
        name: "Pre-flight Checks"
        command: "node scripts/automation/complete-automation-system.js --stage preflight"
        timeout: 300
        retries: 1
        
      - id: backup-creation
        name: "Create Backup"
        command: "node scripts/automation/complete-automation-system.js --stage backup"
        condition: "git-status-dirty"
        
      - id: environment-setup
        name: "Setup Environment"
        command: "node scripts/automation/complete-automation-system.js --stage environment"
        required: true

  - name: dependency-management
    description: "Install and verify all dependencies"
    tasks:
      - id: npm-install
        name: "Install NPM Dependencies"
        command: "npm install --legacy-peer-deps"
        timeout: 600
        
      - id: global-deps
        name: "Install Global Dependencies"
        command: "npm install -g electron hardhat"
        
      - id: verify-deps
        name: "Verify Dependencies"
        command: "npm list --depth=0"

  - name: service-startup
    description: "Start all required services"
    parallel: true
    tasks:
      - id: database-service
        name: "Start Database"
        command: "docker-compose up -d postgres redis"
        healthCheck:
          command: "netstat -an | findstr :5432"
          interval: 5000
          retries: 12
          
      - id: blockchain-service
        name: "Start Blockchain"
        command: "npx hardhat node"
        background: true
        healthCheck:
          command: "netstat -an | findstr :8545"
          interval: 5000
          retries: 12
          
      - id: api-service
        name: "Start API Server"
        command: "node api-server-express.js"
        background: true
        healthCheck:
          command: "netstat -an | findstr :3001"
          interval: 5000
          retries: 12
          
      - id: frontend-service
        name: "Start Frontend"
        command: "npm run dev"
        background: true
        healthCheck:
          command: "netstat -an | findstr :3000"
          interval: 5000
          retries: 12

  - name: compliance-testing
    description: "Run compliance tests and identify issues"
    tasks:
      - id: initial-test
        name: "Initial Compliance Test"
        command: "npm run compliance:check"
        captureOutput: true
        
      - id: parse-results
        name: "Parse Test Results"
        command: "node scripts/automation/complete-automation-system.js --stage parse-results"
        
      - id: generate-report
        name: "Generate Initial Report"
        command: "node scripts/automation/automation-round.js 1"

  - name: automated-fixing
    description: "Apply automated fixes for identified issues"
    maxIterations: 10
    tasks:
      - id: analyze-issues
        name: "Analyze Issues"
        command: "node scripts/automation/complete-automation-system.js --stage analyze"
        
      - id: apply-fixes
        name: "Apply Automated Fixes"
        command: "node scripts/automation/cursor-agent.js {iteration}"
        
      - id: verify-fixes
        name: "Verify Fixes"
        command: "npm run compliance:check"
        
      - id: check-completion
        name: "Check if Complete"
        command: "node scripts/automation/complete-automation-system.js --stage check-completion"
        breakOnSuccess: true

  - name: build-verification
    description: "Verify the system can build successfully"
    tasks:
      - id: lint-check
        name: "Run Linting"
        command: "npm run lint"
        continueOnError: true
        
      - id: type-check
        name: "TypeScript Check"
        command: "npm run type-check"
        continueOnError: true
        
      - id: build-frontend
        name: "Build Frontend"
        command: "npm run build"
        
      - id: build-contracts
        name: "Compile Contracts"
        command: "npx hardhat compile"

  - name: testing
    description: "Run all test suites"
    tasks:
      - id: unit-tests
        name: "Unit Tests"
        command: "npm run test:unit"
        continueOnError: true
        
      - id: integration-tests
        name: "Integration Tests"
        command: "npm run test:integration"
        continueOnError: true
        
      - id: e2e-tests
        name: "E2E Tests"
        command: "npm run test:e2e"
        continueOnError: true

  - name: deployment-prep
    description: "Prepare for deployment"
    tasks:
      - id: optimize-build
        name: "Optimize Build"
        command: "npm run build:production"
        
      - id: generate-docs
        name: "Generate Documentation"
        command: "npm run docs:generate"
        
      - id: create-deployment-package
        name: "Create Deployment Package"
        command: "node scripts/automation/create-deployment-package.js"

  - name: finalization
    description: "Generate reports and cleanup"
    tasks:
      - id: final-report
        name: "Generate Final Report"
        command: "node scripts/automation/complete-automation-system.js --stage final-report"
        
      - id: cleanup
        name: "Cleanup Temporary Files"
        command: "node scripts/automation/complete-automation-system.js --stage cleanup"
        
      - id: git-commit
        name: "Commit Changes"
        command: "git add . && git commit -m 'Automation: Project completion'"
        condition: "auto-commit-enabled"

# Workflow configuration
config:
  # Execution settings
  execution:
    parallel: true
    maxConcurrency: 4
    continueOnError: false
    timeout: 3600 # 1 hour global timeout
    
  # Logging settings
  logging:
    level: "info"
    file: "logs/automation-{timestamp}.log"
    console: true
    
  # Notification settings
  notifications:
    enabled: true
    channels:
      - type: "console"
      - type: "file"
        path: "logs/notifications.log"
    
  # Error handling
  errorHandling:
    retries: 3
    retryDelay: 5000
    saveStateOnError: true
    rollbackOnFailure: true
    
  # Environment variables
  environment:
    NODE_ENV: "development"
    AUTOMATION_MODE: "complete"
    AUTO_FIX: "true"
    PARALLEL_EXECUTION: "true"

# Triggers for automatic execution
triggers:
  - type: "manual"
    command: "npm run automation:complete"
    
  - type: "schedule"
    cron: "0 2 * * *" # Daily at 2 AM
    enabled: false
    
  - type: "webhook"
    endpoint: "/api/automation/trigger"
    enabled: false
    
  - type: "file-change"
    watch:
      - "package.json"
      - "*.config.js"
      - "*.config.ts"
    enabled: false

# Success criteria
successCriteria:
  - id: "all-services-running"
    description: "All services must be running"
    check: "services.all.status === 'running'"
    
  - id: "compliance-pass"
    description: "All compliance tests must pass"
    check: "compliance.critical === 0 && compliance.failed === 0"
    
  - id: "build-success"
    description: "Build must complete successfully"
    check: "build.status === 'success'"
    
  - id: "no-lint-errors"
    description: "No critical lint errors"
    check: "lint.errors === 0"

# Rollback procedures
rollback:
  enabled: true
  triggers:
    - "critical-error"
    - "service-failure"
    - "build-failure"
  steps:
    - command: "git reset --hard HEAD"
    - command: "npm install --legacy-peer-deps"
    - command: "docker-compose down"
    - command: "docker-compose up -d"
